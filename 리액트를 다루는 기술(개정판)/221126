useEffect : 리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook
  → 클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태
  → useEffect(() => { 수행할 작업 }, [배열]);
  → 두번째 파라미터 값이 비어있을 경우 마운트될 때만 실행되고, 검사하고 싶은 값을 넣어주면 특정 값이 업데이트될 때만 실행됨
  → 첫번째 파라미터인 함수에서 return 값은 뒷정리 함수 부분이 되는데, 업데이트되기 직전의 값을 보여줌
    → 만약 언마운트될 때만 뒷정리 함수를 호출하고 싶다면 두번째 파라미터 값을 비워주면 됨.

useReducer : 다양한 상태를 다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook
  → function reducer(state, action){ return {...} } 형태
  → state는 현재 상태, action은 업데이트를 위해 필요한 정보를 담은 값
  → 액션 객체에 반드시 type을 지닐 필요가 없고, 객체가 아니라 문자열이나 숫자여도 상관 없음
useReducer 선언 : useReducer(reducer, { value: 0 })
  → 첫번째 파라미터는 리듀서 함수를 넣고, 두번재 파라미터에는 해당 리듀서의 기본값을 넣기

useMemo : 함수 컴포넌트 내부에서 발생하는 연산을 최적화할 수 있음
  → 렌더링하는 과정에서 특정 값이 바뀌었을 때만 연산을 실행하고, 원하는 값이 바뀌지 않았다면 이전에 연산했던 결과를 다시 사용하는 방식
 
useCallback : useMemo와 비슷한 함수이며, 만들어 놨던 함수를 재사용할 수 있음
  → 함수 내부에서 상태 값에 의존해야 할 때는 그 값을 반드시 두번째 파라미터 안에 포함시켜 주어야 함

* useMemo는 함수의 호출을 특정 값이 바뀌었을 때만 실행하는 것..? useCallback은 함수의 생성을 특정 값이 바뀌었을 때만 실행하는 것..?

useRef : 함수 컴포넌트에서 ref를 쉽게 사용할 수 있도록 해 줌

커스텀 Hooks : useReducer로 작성했던 로직을 따른 Hook으로 분리하는 것 => 장점 : 기존 컴포넌트의 코드 관리가 용이해짐

다른 개발자가 만든 Hooks 링크
  - https://nikgraf.github.io/react-hooks/
  - https://github.com/rehooks/awesome-react-hooks
  
클래스 이름 짓기
  - 컴포넌트 이름 - 클래스 => ex) App-header
  - BEM 네이밍 방식으로 해당 클래스가 어디에서 어느 용도로 사용되는지 작성하는 방식 => ex) .card__title-primary
  - CSS Selector

Sass : CSS 전처리기로 복잡한 작업을 쉽게 할 수 있도록 해 주고, 스타일 코드의 재활용성을 높여 줄 뿐만 아니라 코드의 가독성을 높여서 유지 보수를 더욱 쉽게 해줌
  - 확장자 : .scss, .sass
    → sass 확장자는 중괄호와 세미콜론을 사용하지 않지만, scss는 기존 CSS 작성 방식과 비교해서 문법이 크게 다르지 않음
    → 주로 scss를 사용함
    
.scss
  → 믹스인(@mixin) : 재사용되는 스타일 블록을 함수처럼 사용할 수 있음
  → .a { .b {} } : 일반 CSS에서 .a .b{ }일 경우를 뜻함
  → .a { &.b{} } : .b가 .a와 함께 사용될 경우를 표현할 때 
  → .a { &:hover{ } } : .a에 마우스를 올렸을 때
  → 다른 scss 파일을 불러올 때 @import 구문을 사용함
  
sass-loader 설정 커스터마이징 하기 (p.401)
  → yarn eject 명령어를 사용해야 함
    → git에 커밋 후 yarn eject 명령어 사용
    → config 디렉터리가 생기면 webpack.config.js를 열기
    → sassRegex를 찾은 후 use:에 있는 'sass-loader' 부분을 지우고 뒷부분에 concat을 총해 커스터마이징 된 sass-loader 설정을 넣기

node_modules에서 라이브러리 불러올 땐 물결(~)을 활용
