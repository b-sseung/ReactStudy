redux-actions
  - 리듀서를 작성할 때도 switch/case문이 아닌 handleActions라는 함수를 사용하여 각 액션마다 업데이트 함수를 설정하는 형식으로 작성 가능
  - createAction을 사용하면 매번 객체를 직접 만들어 줄 필요 없이 간단하게 액션 생성 함수를 선언할 수 있음
  - createAction으로 만든 액션 생성 함수는 파라미터로 받아 온 값을 객체 안에 넣을 때 원하는 이름으로 넣는 것이 아니라 payload라는 이름을 공통적으로 넣어 주게 됨
      즉, action.id나 action.todo를 조회하는 대신 모두 공통적으로 action.payload 값을 조회해야 함

handleActions를 사용하기 전
    function counter(state = initialState, action) {
      switch (action.type) {
        case INCREASE:
          return {
            number: state.number + 1,
          };
        case DECREASE:
          return {
            number: state.number - 1,
          };
        default:
          return state;
      }
    }

handleActions를 적용한 후
    const counter = handleActions(
      {
        [INCREASE]: (state, action) => ({ number: state.number + 1 }),
        [DECREASE]: (state, action) => ({ number: state.number - 1 }),
      },
      initialState,
    );
  
  => handleActions(각 액션에 대한 업데이트 함수, 초기 상태)

connect 함수 대신 
  1. useSelector Hook을 사용해도 리덕스의 상태(state)를 조회할 수 있음
      - 사용법 : const 결과 = useSelector(상태 선택 함수);
      - 상태 선택 함수는 mapStateToProps와 형태가 같음
  2. useDispatch Hook을 사용하여 컴포넌트 내부에서 스토어의 내장 함수 dispatch를 사용할 수 있게 해줌
      - 사용법 : const dispatch = useDispatch(); dispatch({type: 'SAMPLE_ACTION'});
      
      
connect 사용했을 때
    const CounterContainer = ({ number, increase, decrease }) => {
      return (
        <Counter
          number={number}
          onIncrease={increase}
          onDecrease={decrease}
        ></Counter>
      );
    };

    export default connect(
      (state) => ({
        number: state.counter.number,
      }),
      {
        increase,
        decrease,
      },
    )(CounterContainer);


useSelector와 useDispatch를 사용했을 때
    const CounterContainer = () => {
      const number = useSelector((state) => state.counter.number);
      const dispatch = useDispatch();
      return (
        <Counter
          number={number}
          onIncrease={() => dispatch(increase())}
          onDecrease={() => dispatch(decrease())}
        ></Counter>
      );
    };
  => 이럴 경우 컴포넌트가 리렌더링될 때마다 함수가 새롭게 만들어지고 있으므로 useCallback으로 액션을 디스패치하는 함수를 감싸 주는 것이 좋음
  

connect 함수와 useSelector & useDispatch의 차이점
  : connect를 활용한 경우 해당 컨테이너 컴포넌트의 부모 컴포넌트가 리렌더링될 때 해당 컨테이너 컴포넌트의 props가 바뀌지 않았다면 리렌더링이 자동으로 방지되어 성능이 최적화됨.
    반면, useSelector를 사용하면 최적화 작업이 자동으로 이루어지지 않으므로 성능 최적화를 위해서는 React.memo를 컨테이너 컴포넌트에 사용해 주어야 함
