리액트에서 라우트 시스템 구축 방법
  - 리액트 라우터(React Router) 라이브러리 활용
  - Next.js 라는 리액트 프로젝트의 프레임워크 사용

리액트 라우터를 사용하려면 react-router-do이라는 라이브러리를 설치해야 함
  → 프로젝트에서 리액트 라우터를 적용할 때 src/index.js 파일에서 react-router-dom에 내장되어 있는 BrowserRouter라는 컴포넌트를 사용하여 감싸면 됨
  
사용자의 브라우저 주소 경로에 따라 우리가 원하는 컴포넌트를 보여주려면 Route라는 컴포넌트를 통해 라우트 설정을 해주어야 함
  → <Route path="주소규칙" element={보여 줄 컴포넌트 JSX} />
  → Route 컴포넌트는 Routes 컴포넌트 내부에서 사용되어야 함

웹 페이지는 원래 링크를 보여줄 때 a 태그를 사용하지만 리액트 라우터를 사용하는 프로젝트에서는 a 태그를 바로 사용하면 안 됨
  → a 태그를 클릭하여 페이지를 이동할 때 브라우저에서는 페이지를 새로 불러오게 되어 있기 때문에 안 됨
  → a 태그 대신 Link 컴포넌트를 사용하면 됨
  → <Link to="경로">링크 이름</Link>
  
URL 파라미터 : 주소의 경로에 유동적인 값을 넣는 형태
  → 주로 ID 또는 이름을 사용하여 특정 데이터를 조회할 때 사용
  → useParams라는 Hook을 사용하여 객체 형태롤 조회할 수 있으며, URL 파라미터의 이름은 라우트 설정을 할 때 Route 컴포넌트의 path props를  
  → /profiles/:username과 같이 경로에 : 를 사용하여 설정

쿼리스트링(Querystring) : 주소의 뒷 부분에 ? 문자열 이후에 key=value로 값을 정의하며 &로 구분하는 형태
  → 키워드 검색, 페이지네이션, 정렬 방식 등 데이터 조회에 필요한 옵션을 전달할 때 사용
  → URL 파라미터와 달리 Route 컴포넌트를 사용할때 별도로 설정해야 하는 것이 없음
  → useLocation이라는 Hook을 사용하며, location 객체를 반환함
  → location.search로 쿼리스트링 값을 가져오고, 앞에 있는 ?을 지우고, & 문자열로 분리한 뒤 key와 value를 파싱하는 작업을 해야 함
    → v6부터 useSearchParams라는 Hook을 통해 이 과정을 간단히 다룰 수 있게 됨

location 객체 : 사용자가 보고 있는 페이지의 정보를 지니고 있음
  - pathname: 현재 주소의 경로 (쿼리스트링 제외)
  - search: 맨 앞의 ? 문자를 포함한 쿼리스트링 값
  - hash : 주소의 # 문자열 뒤의 값 (주로 History API가 지원되지 않는 구형 브라우저에서 클라이언트 라우팅을 사용할 때 쓰는 해시 라우터에서 사용)
  - state : 페이지로 이동할 때 임의로 넣을 수 있는 상태 값
  - key : location 객체의 고유값, 초기에는 default이며 페이지가 변경될 때마다 고유의 값이 생성됨

useSearchParams
  - 배열 타입의 값을 반환
  - 첫 번째 원소는 쿼리파라미터를 조회하거나 수정하는 메서드들이 담긴 객체를 반환
    → get 메서드를 통해 특정 쿼리파라미터를 조회할 수 있음
    → set 메서드를 통해 특정 쿼리파라미터를 업데이트할 수 있음
    → 만약 조회 시 쿼리파라미터가 존재하지 않는다면 null로 조회됨
  - 두 번째 원소는 쿼리파라미터를 객체 형태로 업데이트 할 수 있는 함수를 반환
  - 쿼리파라미터를 사용할 때 주의할 점은 쿼리파라미터를 조회할 때 값은 무조건 문자열 타입이라는 점
  
중첩된 라우트
  - Outlet 컴포넌트 : Route의 children으로 들어가는 JSX 엘리먼트를 보여주는 역할을 함
    → 중접된 라우트와 Outlet은 페이지끼리 공통적으로 보여줘야 하는 레이아웃이 있을 때도 유용하게 사용 가능

Route 컴포넌트의 index라는 props
  - path="/"와 동일한 의미를 가짐

리액트 라우터 부가 기능
  - useNavigation
    → Link 컴포넌트를 사용하지 않고 다른 페이지로 이동해야 하는 상황에 사용하는 Hook
    → 파라미터가 숫자 타입이라면 앞으로 가거나, 뒤로 감
    → 다른 페이지로 이동을 할 때 replace라는 옵션이 있는데, 이 옵션을 사용하면 페이지를 이동할 때 현재 페이지를 페이지 기록에 남기지 않음
  - NavLink
    → 링크에서 사용하는 경로가 현재 라우트의 경로와 일치하는 경우 특정 스타일 또는 CSS 클래스를 적용하는 컴포넌트
    → style과 className은 {isActive: boolean}을 파라미터로 전달받는 함수 타입의 값을 전달함
    → 반복되는 코드가 여러 번 사용되고 있다면 NavLink를 감싼 또 다른 컴포넌트를 만들어서 리팩터링하여 사용하는 것을 권장
  - NotFound 페이지 만들기
    → 사전에 정의되지 않는 경로에 사용자가 진입했을 때 보여주는 페이지
  - Navigate 컴포넌트
    → 컴포넌트를 화면에 보여주는 순간 다른 페이지로 이동하고 싶을 때 사용하는 컴포넌트
    → 내가 생각하기엔 useNavigation은 공통적으로 쓰일 때? 글로벌하게 쓰일 때 쓰고, Navigate 컴포넌트는 개별적으로 쓰이는 것 같음
